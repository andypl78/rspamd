#!/bin/sh
### BEGIN INIT INFO
# Provides:		rspamd
# Required-Start:       $syslog $local_fs $network
# Required-Stop:        $syslog $local_fs
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Rspamd spam filtering system
# Description:		Rspamd is fast and modular spam filtering system
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin

DESC="Rapid spam filtering system"
NAME=rspamd
DAEMON=${DAEMON-/usr/bin/$NAME}
DAEMON_ARGS="-c /etc/rspamd/rspamd.conf"
RSPAMADM=/usr/bin/rspamadm
PIDFILE=${PIDFILE-/run/rspamd/$NAME.pid}
RUNDIR=/run/$NAME
USER=rspamd
GROUP=rspamd
SCRIPTNAME=/etc/init.d/$NAME

[ -x $DAEMON ] || exit 0

. /lib/init/vars.sh

. /lib/lsb/init-functions

do_start()
{
	# Create the run directory if it doesn't exist
	if [ ! -d "$RUNDIR" ]; then
            install -o "$USER" -g "$GROUP" -m 755 -d "$RUNDIR" || return 2
            [ -x /sbin/restorecon ] && /sbin/restorecon "$RUNDIR"
        fi
        $RSPAMADM configtest $DAEMON_ARGS > /dev/null \
                || return 1
        start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILE --chuid $USER:$GROUP --exec $DAEMON -- $DAEMON_ARGS \
                || return 2
}

do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon --stop --quiet --oknodo --retry=TERM/30/KILL/5 --pidfile $PIDFILE
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return "$RETVAL"
}

do_reload() {
        #
        start-stop-daemon --stop --signal HUP --quiet --pidfile $PIDFILE
        RETVAL="$?"
        return "$RETVAL"
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  status)
        status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
  reload|force-reload)
        log_daemon_msg "Reloading $DESC" "$NAME"
        do_reload
        log_end_msg $?
        ;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
        exit 3
        ;;
esac

exit $RETVAL
